В литературе по Java встречаются такие термины, как "внутренние классы" inner classes и "вложенные классы" nested classes.
Для вложенных классов inner классы являются подмножеством.
Тем не менее часто под внутренними классами подразумеваются все вложенные - вот такой вот парадокс.

Определение класса может размещаться внутри определения другого класса.
Такие классы принято называть вложенными или внутренними.
Область видимости вложенного класса ограничена областью видимости внешнего класса.
Поэтому, если создается класс B внутри класса A, то класс B не может существовать независимо от класса A.
Вложенные классы позволяют группировать классы, логически принадлежащие друг другу, и управлять доступом к ним.

Существуют два типа вложенных класса - статические (static-nested-class) и нестатические (non-static).
Собственно нестатические вложенные классы имеют и другое название - внутренние классы.
Внешний класс иногда называют еще обрамляющим классом.


Вложенные классы, nested classes

Если связь между объектом внутреннего класса и объектом внешнего класса не нужна, можно сделать внутренний класс статическим static.
Такой класс называют вложенным nested. Применение статического внутреннего класса означает следующее :

    для создания объекта статического внутреннего класса не нужен объект внешнего класса;
    из объекта вложенного класса нельзя обращаться к нестатическим членам внешнего класса.

Вложенный класс имеет доступ к членам своего внешнего класса, в том числе и к закрытым членам.
Однако, внешний класс не имеет доступа к членам вложенного класса. Вложенный класс при этом является членом внешнего класса.

Статический класс объявляется ключевым словом static.
При этом класс должен обращаться к нестатическим членам своего внешнего класса при помощи объекта,
т.е. он не может обращаться напрямую на нестатические члены своего внешнего класса. На практике подобные классы используются редко.

Внутренние классы, inner classes

Нестатические вложенные классы называют также внутренними классами inner class.
Внутренний класс имеет доступ ко всем переменным и методам своего внешнего класса и может непосредственно ссылаться на них.
Внутренние классы создаются внутри окружающего класса :


// внешний класс
class Outer {
    int x1 = 0;
    int x2 = 0;

    void summa(final int x1, final int x2) {
        this.x1 = x1;
        this.x2 = x2;
        Inner inner = new Inner();
        inner.display();
    }
    // внутренний класс
    class Inner {
        void display() {
            System.out.println ("summa = " + String.valueOf(x1 + x2));
        }
    }
}
...

class MainActivity {
    Outer outer = new Outer();
    outer.summa(12, 11);
}

Внутренний класс Inner определён в области видимости класса Outer.
Поэтому любой код в классе Inner может непосредственно обращаться к переменным x1, x2 внешнего класса.
После создания экземпляра класса Outer вызывается его метод summa () с параметрами, который создаёт экземпляр класса Inner с вызовом метода display ().

Внутренний класс можно определить не только на уровне класса, но и внутри метода или внутри тела цикла.
Если понадобится создать объект внутреннего класса не в статическом методе внешнего класса,
тип этого объекта должен задаваться в формате ИмяВнешнегоКласса.ИмяВнутреннегоКласса.

Объект внутреннего класса связан с внешним объектом-создателем и может обращаться к его членам без каких-либо дополнительных описаний.
 Для внутренних классов доступны все элементы внешнего класса.
 Если необходимо получить ссылку на объект внешнего класса, то следует использовать наименование внешнего класса с ключевым словом this,
 разделенных точкой, например : Outer.this.

